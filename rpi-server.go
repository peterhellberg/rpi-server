package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"image/png"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strconv"
	"time"

	evdev "github.com/MaitreDede/golang-evdev"
	screen "github.com/nathany/bobblehat/sense/screen"
	color "github.com/nathany/bobblehat/sense/screen/color"
	gfx "github.com/peterhellberg/gfx"
)

var framebuffer = screen.NewFrameBuffer()

func clear() {
	framebuffer = screen.NewFrameBuffer()

	// Clear the Sense HAT screen
	screen.Clear()
}

func main() {
	var path string

	flag.StringVar(&path, "path", "/dev/input/event0", "path to the event device")

	flag.Parse()

	clear()

	// Setup the logger
	logger := log.New(os.Stdout, "", 0)

	handleSignals(logger)

	hs := setup(logger)

	device, err := openInputDevice(path)
	if err != nil {
		logger.Printf("Unable to open input device: %s\nError: %v\n", path, err)
		os.Exit(1)
	}

	logger.Println(device)

	go hs.ListenAndServe()

	var toggle bool

	for {
		events, err := device.Read()
		if err != nil {
			fmt.Printf("device.Read() Error: %v\n", err)
			os.Exit(1)
		}

		for _, ev := range events {
			switch ev.Type {
			case evdev.EV_KEY:
				ke := evdev.NewKeyEvent(&ev)

				if ke.State != evdev.KeyDown {
					continue
				}

				// Create a new framebuffer
				fb := screen.NewFrameBuffer()

				switch ke.Scancode {
				case evdev.KEY_ENTER:
					toggle = !toggle

					fmt.Println("[ENTER]", toggle)

					if toggle {
						draw(fb, 0, 0, 8, 8, color.New(255, 255, 255))
					}
				case evdev.KEY_UP:
					fmt.Println("[UP] YELLOW")
					draw(fb, 0, 0, 8, 4, color.New(255, 255, 0))
				case evdev.KEY_DOWN:
					fmt.Println("[DOWN] RED")
					draw(fb, 0, 4, 8, 8, color.New(255, 0, 0))
				case evdev.KEY_LEFT:
					fmt.Println("[LEFT] BLUE")
					draw(fb, 0, 0, 4, 8, color.New(0, 0, 255))
				case evdev.KEY_RIGHT:
					fmt.Println("[RIGHT] GREEN")
					draw(fb, 4, 0, 8, 8, color.New(0, 128, 0))
				}

				framebuffer = fb

				screen.Draw(fb)
			}
		}
	}
}

func openInputDevice(path string) (*evdev.InputDevice, error) {
	if !evdev.IsInputDevice(path) {
		return nil, fmt.Errorf("not an input device")
	}

	return evdev.Open(path)
}

func handleSignals(logger *log.Logger) {
	c := make(chan os.Signal, 1)

	signal.Notify(c, os.Interrupt)

	go func() {
		for range c {
			logger.Println("Clearing the screen...")
			clear()
			os.Exit(0)
		}
	}()
}

func draw(fb *screen.FrameBuffer, a, b, m, n int, c color.Color) {
	for i := a; i < m; i++ {
		for j := b; j < n; j++ {
			fb.SetPixel(i, j, c)
		}
	}
}

func setup(logger *log.Logger) *http.Server {
	return &http.Server{
		Addr: getAddr(),
		Handler: newServer(
			logWith(logger),
			kofiKeyFromEnv(os.Getenv),
		),
		ReadTimeout:  5 * time.Second,
		WriteTimeout: 10 * time.Second,
		IdleTimeout:  60 * time.Second,
	}
}

func getAddr() string {
	if port := os.Getenv("PORT"); port != "" {
		return ":" + port
	}

	return ":80"
}

func newServer(options ...Option) *Server {
	s := &Server{
		logger: log.New(ioutil.Discard, "", 0),
		Index: Index{
			Booted:      time.Now(),
			Framebuffer: "https://71a5013a854c18d844e976d4f264beb6.balena-devices.com/framebuffer.png?scale=64",
		},
	}

	for _, o := range options {
		o(s)
	}

	s.mux = http.NewServeMux()
	s.mux.HandleFunc("/", s.index)
	s.mux.HandleFunc("/clear", s.clear)
	s.mux.HandleFunc("/pixel", s.pixel)
	s.mux.HandleFunc("/framebuffer.png", s.framebuffer)
	s.mux.HandleFunc("/favicon.ico", s.favicon)
	s.mux.HandleFunc("/webhooks/ko-fi", s.kofi)

	return s
}

type Option func(*Server)

func logWith(logger *log.Logger) Option {
	return func(s *Server) {
		s.logger = logger
	}
}

func kofiKeyFromEnv(getenv func(string) string) Option {
	return func(s *Server) {
		s.kofiKey = getenv("KOFI_KEY")
	}
}

type Server struct {
	Index
	mux     *http.ServeMux
	logger  *log.Logger
	kofiKey string
}

func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	s.log("%s %s", r.Method, r.URL.Path)

	s.mux.ServeHTTP(w, r)
}

func (s *Server) log(format string, v ...interface{}) {
	s.logger.Printf(format+"\n", v...)
}

func (s *Server) index(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")

	json.NewEncoder(w).Encode(s.Index)
}

type Index struct {
	Booted      time.Time
	Framebuffer string
}

type kofiData struct {
	MessageID string    `json:"message_id"`
	Timestamp time.Time `json:"timestamp"`
	Type      string    `json:"type"`
	FromName  string    `json:"from_name"`
	Message   string    `json:"message"`
	Amount    string    `json:"amount"`
	URL       string    `json:"url"`
}

func (s *Server) kofi(w http.ResponseWriter, r *http.Request) {
	if r.URL.Query().Get("key") != s.kofiKey || len(s.kofiKey) == 0 {
		w.WriteHeader(http.StatusUnauthorized)
		return
	}

	var data kofiData

	if err := r.ParseForm(); err != nil {
		s.log("Error: %v", err)
		return
	}

	if err := json.Unmarshal([]byte(r.Form.Get("data")), &data); err != nil {
		s.log("Unable to decode Ko-fi webhook data: %v", err)
	}

	s.log("Ko-fi: %+v", data)

	m, err := gfx.DecodePNGBytes(kofiImage)
	if err != nil {
		s.log("Error: %v", err)
		return
	}

	if m.Bounds().Eq(gfx.IR(0, 0, 8, 8)) {
		framebuffer.SetImage(m)
		screen.Draw(framebuffer)
	}
}

func (s *Server) framebuffer(w http.ResponseWriter, r *http.Request) {
	if framebuffer == nil {
		w.WriteHeader(http.StatusNoContent)
		return
	}

	if r.Method == http.MethodPost {
		s.updateFramebuffer(w, r)
		return
	}

	if scale, err := strconv.Atoi(r.URL.Query().Get("scale")); err == nil && scale > 1 && scale <= 100 {
		png.Encode(w, gfx.NewScaledImage(framebuffer, float64(scale)))

		return
	}

	png.Encode(w, framebuffer)
}

func (s *Server) updateFramebuffer(w http.ResponseWriter, r *http.Request) {
	m, err := gfx.DecodePNG(r.Body)
	if err != nil {
		s.log("Error: %v", err)
		return
	}

	if m.Bounds().Eq(gfx.IR(0, 0, 8, 8)) {
		framebuffer.SetImage(m)
		screen.Draw(framebuffer)
	}
}

func (s *Server) clear(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		w.WriteHeader(http.StatusMethodNotAllowed)
		return
	}

	clear()
}

func (s *Server) pixel(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		w.WriteHeader(http.StatusMethodNotAllowed)
		return
	}

	var v struct {
		X int
		Y int
		R uint8
		G uint8
		B uint8
	}

	if err := json.NewDecoder(r.Body).Decode(&v); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	c := gfx.ColorRGBA(v.R, v.G, v.B, 0xff)

	framebuffer.Set(v.X, v.Y, c)

	screen.Draw(framebuffer)
}

func (s *Server) favicon(w http.ResponseWriter, r *http.Request) {
	w.Write(faviconData)
}

var faviconData = []byte{
	0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x08, 0x03, 0x00, 0x00, 0x00, 0x9d, 0xb7, 0x81,
	0xec, 0x00, 0x00, 0x02, 0x2b, 0x50, 0x4c, 0x54, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
	0x00, 0xc9, 0x1e, 0x4a, 0x83, 0xc5, 0x5c, 0xc8, 0x1e, 0x49, 0xc4, 0x1d, 0x48, 0xc2, 0x1d, 0x47,
	0xff, 0x26, 0x5f, 0x81, 0xc3, 0x5b, 0xfa, 0x25, 0x5c, 0x80, 0xc1, 0x5a, 0xd1, 0x1f, 0x4d, 0xc6,
	0x1d, 0x49, 0x82, 0xc4, 0x5c, 0x7f, 0xbf, 0x59, 0xd9, 0x20, 0x50, 0xf9, 0x25, 0x5b, 0xe2, 0x21,
	0x53, 0xcd, 0x1e, 0x4b, 0xc5, 0x1d, 0x48, 0xff, 0x28, 0x62, 0xf5, 0x24, 0x5a, 0xec, 0x23, 0x56,
	0xdf, 0x21, 0x52, 0x98, 0xe5, 0x6b, 0xe4, 0x22, 0x54, 0x54, 0x0c, 0x1f, 0xf1, 0x24, 0x59, 0xee,
	0x24, 0x58, 0xe9, 0x22, 0x56, 0x4e, 0x0b, 0x1d, 0x04, 0x00, 0x01, 0x96, 0xe2, 0x69, 0x0e, 0x02,
	0x05, 0xe7, 0x22, 0x55, 0xd8, 0x20, 0x4f, 0xd6, 0x20, 0x4e, 0x24, 0x05, 0x0d, 0x1b, 0x04, 0x0a,
	0x85, 0xc9, 0x5d, 0xa0, 0x18, 0x3a, 0x37, 0x07, 0x14, 0xf3, 0x24, 0x59, 0xdd, 0x21, 0x51, 0xc0,
	0x1c, 0x46, 0xbe, 0x1c, 0x46, 0x8b, 0x15, 0x33, 0x87, 0x14, 0x31, 0x65, 0x0f, 0x25, 0x15, 0x03,
	0x08, 0x9b, 0xea, 0x6d, 0x91, 0xda, 0x66, 0x8e, 0xd5, 0x63, 0x88, 0xcd, 0x5f, 0xf0, 0x24, 0x58,
	0x7a, 0xb8, 0x56, 0xd4, 0x1f, 0x4d, 0xcf, 0x1f, 0x4c, 0x8e, 0x15, 0x34, 0x49, 0x0b, 0x1b, 0x0c,
	0x12, 0x09, 0x08, 0x01, 0x03, 0xa0, 0xef, 0x70, 0x93, 0xdd, 0x67, 0x8b, 0xd1, 0x61, 0x87, 0xcb,
	0x5f, 0x7d, 0xbc, 0x58, 0xee, 0x23, 0x57, 0xdb, 0x20, 0x50, 0xbb, 0x1c, 0x44, 0xb1, 0x1a, 0x41,
	0xa3, 0x18, 0x3c, 0x82, 0x13, 0x2f, 0x7d, 0x13, 0x2d, 0x5c, 0x0d, 0x22, 0x1d, 0x2b, 0x14, 0x1e,
	0x04, 0x0b, 0xa7, 0xfb, 0x75, 0x8f, 0xd7, 0x64, 0x89, 0xce, 0x60, 0xfc, 0x25, 0x5c, 0x76, 0xb2,
	0x53, 0x5a, 0x89, 0x3f, 0x57, 0x83, 0x3d, 0xa6, 0x17, 0x3c, 0x25, 0x36, 0x1a, 0x3d, 0x09, 0x16,
	0x15, 0x1f, 0x0f, 0x04, 0x05, 0x03, 0xa3, 0xf4, 0x72, 0x9e, 0xed, 0x6f, 0x8b, 0xd2, 0x62, 0x6b,
	0xa1, 0x4b, 0x9a, 0x16, 0x38, 0x85, 0x13, 0x30, 0x79, 0x12, 0x2d, 0x60, 0x0c, 0x23, 0x42, 0x09,
	0x18, 0x33, 0x07, 0x13, 0x2f, 0x07, 0x11, 0x07, 0x0b, 0x05, 0xb3, 0xff, 0x7d, 0xac, 0xff, 0x78,
	0xff, 0x29, 0x65, 0x73, 0xac, 0x50, 0xb6, 0x1b, 0x43, 0x5d, 0x8c, 0x41, 0xac, 0x19, 0x3f, 0xa8,
	0x19, 0x3e, 0x51, 0x7b, 0x39, 0x4b, 0x72, 0x35, 0x94, 0x16, 0x35, 0x75, 0x11, 0x2b, 0x6e, 0x10,
	0x27, 0x37, 0x52, 0x26, 0x5a, 0x0c, 0x21, 0x2c, 0x43, 0x1f, 0x20, 0x2f, 0x16, 0x28, 0x06, 0x0f,
	0x12, 0x03, 0x06, 0xa0, 0xf1, 0x70, 0x6d, 0xa4, 0x4c, 0x62, 0x94, 0x45, 0x44, 0x66, 0x2f, 0x3a,
	0x57, 0x28, 0x2a, 0x3f, 0x1d, 0x18, 0x24, 0x11, 0x11, 0x1a, 0x0c, 0xa4, 0xf6, 0x73, 0xff, 0x2c,
	0x6b, 0xf7, 0x24, 0x5a, 0x41, 0x61, 0x2e, 0x71, 0x11, 0x29, 0x34, 0x4d, 0x24, 0x31, 0x48, 0x22,
	0x2a, 0x06, 0x0f, 0xa1, 0xf2, 0x71, 0x69, 0x9e, 0x49, 0x54, 0x7d, 0x3b, 0x4f, 0x75, 0x38, 0x3e,
	0x5a, 0x2b, 0x3a, 0x5c, 0x2a, 0x8b, 0xcb, 0x61, 0x6e, 0xb0, 0x4f, 0x6e, 0xa9, 0x4d, 0x8a, 0x0a,
	0x30, 0x7d, 0x0d, 0x2d, 0xd1, 0x91, 0x9b, 0xb4, 0x00, 0x00, 0x00, 0x27, 0x74, 0x52, 0x4e, 0x53,
	0x00, 0x6f, 0xd4, 0xec, 0xe8, 0xba, 0x69, 0x51, 0x04, 0xfd, 0xbf, 0x9f, 0x93, 0x18, 0xdb, 0xcc,
	0xc4, 0xb5, 0xaa, 0xa4, 0x7e, 0x73, 0x2d, 0x26, 0xe4, 0x8d, 0x1e, 0x11, 0x09, 0xf9, 0xf3, 0x87,
	0x60, 0x49, 0x42, 0x39, 0xb1, 0x98, 0x33, 0xd5, 0xd6, 0x19, 0x41, 0x00, 0x00, 0x07, 0xb6, 0x49,
	0x44, 0x41, 0x54, 0x58, 0xc3, 0x74, 0xd1, 0xcb, 0x6b, 0x1a, 0x41, 0x1c, 0x07, 0xf0, 0xf1, 0x95,
	0xc4, 0xc6, 0xbc, 0x9a, 0x34, 0xa1, 0x49, 0xa0, 0xb4, 0x4d, 0xfb, 0x63, 0x2e, 0xc3, 0xc0, 0xce,
	0x79, 0x8f, 0x7b, 0xdb, 0xfb, 0x3e, 0xd8, 0xcb, 0xb2, 0xaf, 0xeb, 0xb2, 0x2b, 0x2a, 0xb2, 0xbe,
	0x8e, 0x2a, 0x22, 0xe8, 0x41, 0x14, 0x34, 0x46, 0x0d, 0x84, 0x48, 0xf3, 0x68, 0xff, 0xc0, 0xae,
	0x6b, 0x08, 0x2d, 0xab, 0x9f, 0xd3, 0x30, 0xbf, 0x07, 0xdf, 0x61, 0xd0, 0xff, 0xae, 0x77, 0x13,
	0xc9, 0x0f, 0x27, 0xd9, 0x8f, 0xb9, 0xdc, 0xf9, 0x25, 0xfa, 0xc7, 0xe5, 0xc5, 0xe7, 0xdc, 0x69,
	0xf6, 0x24, 0x73, 0x98, 0xd8, 0xbd, 0x42, 0x5b, 0x5d, 0xe5, 0x32, 0x49, 0x80, 0xca, 0x08, 0x16,
	0x0b, 0x08, 0x9d, 0xa2, 0x77, 0xfb, 0x10, 0xd2, 0x03, 0x70, 0x9b, 0x50, 0x39, 0xcc, 0xfc, 0x38,
	0x40, 0x9b, 0x7c, 0x3d, 0x4e, 0xc3, 0x28, 0x80, 0xde, 0xc3, 0x93, 0xd3, 0xe3, 0x66, 0x25, 0x77,
	0xde, 0xcc, 0x9e, 0x5c, 0x45, 0xa9, 0x6e, 0xb2, 0xe0, 0x2e, 0x4a, 0x33, 0xad, 0x3b, 0x29, 0xdc,
	0x15, 0x75, 0xbd, 0x5c, 0x49, 0x1f, 0xef, 0xa2, 0x98, 0xeb, 0xf4, 0x62, 0x18, 0x74, 0x8c, 0x89,
	0x7a, 0xcf, 0x09, 0xb2, 0xec, 0x4b, 0x85, 0x3f, 0x7d, 0x68, 0x1e, 0xed, 0x85, 0x95, 0xa3, 0x26,
	0x0c, 0xfd, 0x8e, 0xa4, 0x98, 0x8a, 0xc4, 0xd5, 0xe4, 0x06, 0x8f, 0x47, 0xb3, 0x79, 0x2a, 0xfe,
	0x90, 0xb0, 0x4f, 0x19, 0x13, 0x55, 0xb0, 0x98, 0x48, 0x30, 0xb5, 0x89, 0x22, 0x88, 0xb8, 0x0b,
	0xfb, 0x08, 0xe5, 0x60, 0x8a, 0x19, 0xef, 0x13, 0x95, 0x60, 0x22, 0x52, 0x5b, 0xc8, 0x13, 0xc1,
	0x70, 0x93, 0x28, 0xe6, 0x20, 0x0d, 0x03, 0x49, 0xc4, 0xc4, 0x51, 0x64, 0x42, 0x31, 0xc6, 0x1c,
	0x53, 0x85, 0xfb, 0x25, 0x5c, 0x1c, 0xc0, 0x5c, 0xa8, 0x59, 0x8c, 0x0b, 0xaf, 0x08, 0xf5, 0x65,
	0x87, 0x72, 0xd8, 0xe8, 0x43, 0xea, 0x32, 0xb6, 0xe0, 0x1c, 0x46, 0x96, 0x42, 0xb1, 0x5d, 0x28,
	0xde, 0x9a, 0x3c, 0xb7, 0x5e, 0xc1, 0x13, 0x48, 0xec, 0xc0, 0x64, 0xec, 0xac, 0xc7, 0x05, 0xbe,
	0x51, 0xea, 0xd8, 0x98, 0xd4, 0xe5, 0x25, 0xfc, 0x44, 0x31, 0x37, 0xf0, 0x8a, 0x2d, 0x0e, 0x5b,
	0xda, 0xf3, 0x5d, 0x89, 0x97, 0xe8, 0x6a, 0x05, 0x35, 0x1e, 0x53, 0x29, 0x57, 0x10, 0x57, 0xe3,
	0x4c, 0xa8, 0xdd, 0x0e, 0xfa, 0x85, 0x3a, 0xe6, 0x6c, 0xf5, 0xa5, 0x92, 0x41, 0x71, 0xfb, 0xf0,
	0xe0, 0xab, 0x1c, 0x26, 0x79, 0xa9, 0x30, 0x18, 0x75, 0xab, 0x42, 0x98, 0x9a, 0xd6, 0x8a, 0x00,
	0xd3, 0x71, 0xb8, 0x8b, 0xf9, 0x5e, 0xa3, 0x3c, 0x6c, 0xf0, 0x4a, 0x78, 0x16, 0xcd, 0x67, 0x38,
	0x45, 0x71, 0xdf, 0xa1, 0xac, 0xe5, 0xa3, 0xe4, 0x7e, 0xb5, 0x11, 0xcc, 0x35, 0x4f, 0x65, 0x84,
	0x9f, 0x00, 0xbc, 0x18, 0x84, 0x72, 0xf7, 0x56, 0x59, 0x2f, 0x8e, 0x4d, 0x46, 0xc2, 0x86, 0x3c,
	0x79, 0x84, 0x6f, 0x68, 0x83, 0x24, 0x74, 0xab, 0x14, 0x47, 0x71, 0x79, 0xe3, 0x01, 0x7e, 0xff,
	0xe2, 0x35, 0xaf, 0x04, 0xf0, 0xea, 0x69, 0xb2, 0xd7, 0x83, 0xa1, 0x50, 0xa3, 0x04, 0x87, 0x98,
	0xd1, 0x81, 0xc3, 0x3d, 0xb4, 0xc1, 0x19, 0x3c, 0x6a, 0x2a, 0x8e, 0x30, 0xd1, 0xd3, 0x40, 0x17,
	0x5b, 0x8a, 0x0e, 0x00, 0x85, 0x96, 0xe9, 0xc2, 0x6d, 0xdb, 0x62, 0x38, 0x62, 0xd3, 0x29, 0x7c,
	0x41, 0x1b, 0x1d, 0x41, 0xaf, 0x6d, 0x13, 0xbc, 0xc2, 0x39, 0x12, 0x1f, 0x40, 0xd7, 0x85, 0x90,
	0x5e, 0x0c, 0x2a, 0x6a, 0x95, 0xad, 0x0b, 0x04, 0xb7, 0x9f, 0x20, 0x89, 0x36, 0xdb, 0x81, 0x72,
	0xc3, 0x0e, 0x5b, 0x22, 0x8e, 0xec, 0xcd, 0xe0, 0x4d, 0xc0, 0xf3, 0x0e, 0x8e, 0x70, 0x58, 0xec,
	0x2c, 0x21, 0x81, 0xb6, 0xf8, 0xb4, 0xca, 0x9b, 0x8f, 0x7e, 0x1d, 0x13, 0xd2, 0x1e, 0xc0, 0x1b,
	0xb7, 0x9a, 0xa7, 0xd1, 0x38, 0x13, 0xdb, 0x75, 0x1d, 0xce, 0xd0, 0x56, 0x19, 0x28, 0xf7, 0x2d,
	0x43, 0x21, 0x94, 0xb0, 0x7a, 0xab, 0x08, 0xef, 0xa6, 0x2d, 0x93, 0x12, 0x42, 0xeb, 0x92, 0x59,
	0x1a, 0x56, 0x8e, 0xd1, 0x76, 0xd7, 0x7f, 0x09, 0xa9, 0xbb, 0x97, 0xa6, 0xe2, 0x38, 0x8e, 0xe3,
	0xeb, 0xc2, 0x0c, 0xf3, 0xa2, 0xe7, 0x10, 0x42, 0xbb, 0x89, 0xf7, 0xcf, 0x73, 0x7e, 0x3f, 0x0e,
	0x1b, 0x6d, 0x73, 0xe7, 0xa8, 0x7b, 0x38, 0x5b, 0x7b, 0xb2, 0xcd, 0xd4, 0xcd, 0x82, 0xda, 0x58,
	0xd2, 0x45, 0xa6, 0x33, 0x06, 0x8d, 0x5a, 0xd2, 0x03, 0x56, 0x1b, 0x81, 0x17, 0xad, 0xcc, 0x06,
	0x06, 0xe1, 0x4d, 0x11, 0xd8, 0x4d, 0xf4, 0xf0, 0xe7, 0xb5, 0xb6, 0x25, 0x81, 0x1e, 0x7d, 0xdd,
	0x7f, 0xbe, 0xfc, 0xf8, 0x7e, 0xbe, 0xfc, 0x46, 0xe0, 0xed, 0xd5, 0x5b, 0x37, 0x26, 0xaf, 0x3f,
	0xbd, 0xf3, 0x8e, 0xff, 0x6c, 0x3f, 0xff, 0xf6, 0x6c, 0xf2, 0xca, 0xe5, 0xd1, 0x4f, 0x30, 0x74,
	0xc1, 0x75, 0x90, 0x23, 0xc3, 0xf0, 0x78, 0xf4, 0xc7, 0xc3, 0xef, 0xb7, 0xe9, 0x88, 0x4f, 0xc5,
	0x00, 0x78, 0xfd, 0xe1, 0xd1, 0xcf, 0x07, 0xdb, 0x30, 0x7c, 0xd6, 0x75, 0x88, 0x8b, 0xf0, 0x84,
	0x9e, 0x4a, 0x79, 0xb6, 0xe8, 0xd6, 0x6a, 0xa1, 0x18, 0xbb, 0x8e, 0x1e, 0x96, 0x1f, 0x84, 0xf9,
	0xd6, 0xaf, 0x5a, 0x6d, 0xb6, 0x0e, 0x5f, 0x23, 0xbe, 0x60, 0xaa, 0xb0, 0x18, 0x31, 0xb4, 0x06,
	0x8d, 0xb9, 0x17, 0xbf, 0x5f, 0x65, 0x81, 0x4b, 0x07, 0xe7, 0xfb, 0xe0, 0xfd, 0x84, 0x2f, 0xe2,
	0x37, 0xcc, 0x34, 0x1b, 0x66, 0x41, 0x6a, 0x6d, 0x1e, 0x7d, 0x5c, 0xa5, 0x2b, 0x9f, 0x7d, 0xe3,
	0xd6, 0x5d, 0x19, 0x85, 0x13, 0xc7, 0x5c, 0xce, 0x4e, 0xc3, 0x92, 0x99, 0xd4, 0x67, 0x92, 0xbe,
	0x55, 0x42, 0x4a, 0x68, 0xa2, 0x4b, 0x26, 0xdc, 0x44, 0x55, 0x51, 0x6a, 0x09, 0x35, 0x07, 0xa7,
	0x9c, 0xf3, 0xfd, 0x90, 0x51, 0x52, 0x93, 0x13, 0xd5, 0x12, 0xb4, 0xcc, 0xc0, 0xbf, 0x01, 0xda,
	0x98, 0x9d, 0x66, 0x53, 0x15, 0xf4, 0x80, 0x66, 0xe6, 0xa0, 0xdf, 0xe5, 0x64, 0x80, 0x92, 0x21,
	0xc4, 0x4c, 0x62, 0xba, 0x0e, 0x50, 0x33, 0x93, 0x01, 0x8f, 0xd6, 0xa6, 0xbb, 0xd7, 0x97, 0x81,
	0xbc, 0xf2, 0x4a, 0xad, 0xf8, 0x25, 0x8b, 0xe3, 0x21, 0x9c, 0x87, 0x4c, 0x58, 0x97, 0x96, 0x7f,
	0x8b, 0x8e, 0x97, 0x5e, 0x2b, 0x6c, 0xdb, 0xf6, 0x4d, 0x2b, 0x58, 0x06, 0x20, 0x6a, 0x25, 0xa4,
	0xb4, 0xd6, 0xe0, 0x9c, 0x63, 0x83, 0x0b, 0x22, 0x35, 0xa6, 0xee, 0xcd, 0xd3, 0x13, 0x0f, 0xad,
	0x64, 0x96, 0x33, 0xe5, 0x56, 0x9c, 0x85, 0x9d, 0x29, 0x60, 0xe7, 0x9a, 0x4f, 0xf7, 0x8a, 0x98,
	0x63, 0x97, 0x67, 0xd8, 0xf2, 0x4e, 0x1b, 0x2b, 0x00, 0xf5, 0x5c, 0xb3, 0x99, 0x6b, 0xd0, 0x53,
	0x59, 0x76, 0x7b, 0x53, 0x33, 0x2b, 0x1f, 0x89, 0x37, 0x55, 0xb0, 0x90, 0x66, 0xc8, 0x61, 0xc0,
	0x08, 0x59, 0xe5, 0xc9, 0x02, 0x8d, 0x59, 0x6b, 0xda, 0xb6, 0x2d, 0xdf, 0x1c, 0x1d, 0x2d, 0xc3,
	0x4a, 0x16, 0x0b, 0xfe, 0xaa, 0x3f, 0x0a, 0xf7, 0xfd, 0xeb, 0x59, 0xc7, 0x01, 0x7d, 0xc4, 0x57,
	0x17, 0x80, 0x90, 0x11, 0xf1, 0x04, 0xda, 0xbb, 0x1b, 0x33, 0xd7, 0x00, 0xb2, 0x7f, 0x97, 0x27,
	0x44, 0xbb, 0x1c, 0x95, 0x87, 0xa9, 0xfc, 0x3c, 0x03, 0xfb, 0xe7, 0x8f, 0xd3, 0x55, 0x6f, 0x07,
	0xba, 0xed, 0x09, 0xa3, 0x04, 0x2c, 0x45, 0xa4, 0xe8, 0xd0, 0x0b, 0xd5, 0x55, 0x00, 0x87, 0x53,
	0x38, 0x09, 0xf9, 0x1c, 0x10, 0x4b, 0x05, 0x75, 0xd1, 0x15, 0x08, 0x67, 0xa0, 0xb2, 0xe8, 0x16,
	0x3d, 0xd2, 0xd6, 0x81, 0x37, 0x1b, 0xec, 0xf7, 0x86, 0x21, 0x28, 0xab, 0xf5, 0x12, 0x6c, 0x56,
	0xa5, 0xe8, 0xd1, 0x26, 0x74, 0xa8, 0x27, 0xc4, 0x2e, 0x4f, 0x38, 0x4a, 0xc8, 0x54, 0x4b, 0x31,
	0x06, 0xf7, 0x7e, 0xea, 0x7f, 0x3a, 0x2d, 0x93, 0xd7, 0xb6, 0x81, 0x28, 0x8c, 0xbb, 0x49, 0xe9,
	0x06, 0x69, 0xe9, 0x1a, 0xd3, 0x92, 0x96, 0xae, 0x9f, 0x19, 0x49, 0x08, 0x09, 0xb4, 0xd8, 0x91,
	0x50, 0xa4, 0xd8, 0x78, 0x13, 0x8e, 0x77, 0x5f, 0x4c, 0x6c, 0xe3, 0x93, 0x97, 0x24, 0x26, 0x87,
	0x1e, 0x4a, 0x6f, 0xb1, 0x4d, 0x73, 0x28, 0x26, 0x85, 0x24, 0x14, 0x92, 0x73, 0x4b, 0xa1, 0xff,
	0x63, 0x67, 0xac, 0x46, 0x31, 0xaa, 0x1d, 0xda, 0xfe, 0x4e, 0xd2, 0x20, 0x7d, 0xc3, 0x7b, 0xf3,
	0xbd, 0x37, 0x0f, 0x7b, 0x31, 0x52, 0xdf, 0x03, 0x26, 0x29, 0xd9, 0x17, 0x50, 0xe4, 0x36, 0x5a,
	0x46, 0xc4, 0x27, 0x6a, 0x97, 0x71, 0x52, 0x2f, 0x09, 0x5f, 0x10, 0x6c, 0xec, 0xb7, 0x1e, 0xe2,
	0x53, 0x5e, 0xe2, 0x8c, 0x26, 0xce, 0xa5, 0x0c, 0xf1, 0x05, 0x0a, 0x1c, 0x70, 0x68, 0xea, 0xbe,
	0x00, 0xb1, 0x8e, 0xb0, 0xdb, 0x21, 0x44, 0x8c, 0x07, 0xd3, 0xf0, 0xf2, 0x39, 0x8e, 0xbf, 0xf3,
	0x84, 0x0a, 0xcc, 0x7e, 0x2f, 0x1b, 0xcc, 0xc2, 0xc4, 0xbc, 0x54, 0xd4, 0x26, 0x18, 0x75, 0x48,
	0xd4, 0xd9, 0xc1, 0xda, 0x4a, 0xc0, 0x43, 0xe0, 0x4c, 0xc2, 0x42, 0xc8, 0x2a, 0x92, 0x2f, 0xc0,
	0xa9, 0x63, 0x00, 0xc3, 0x99, 0xa4, 0xa4, 0x8e, 0x50, 0xb5, 0x09, 0x51, 0xf4, 0x76, 0xa0, 0xa4,
	0xde, 0xa0, 0xd6, 0xc8, 0x10, 0x92, 0xaf, 0x02, 0x11, 0x7f, 0x43, 0xce, 0x92, 0x40, 0xa9, 0x69,
	0x26, 0x77, 0x71, 0x0c, 0xea, 0x2e, 0x06, 0x36, 0x89, 0x48, 0x99, 0x2c, 0xde, 0x06, 0x3c, 0xe4,
	0x4a, 0xdb, 0x11, 0xd2, 0x89, 0x03, 0x4d, 0xa1, 0xf8, 0xfb, 0x7f, 0x49, 0x88, 0x83, 0x11, 0x17,
	0xd2, 0xbc, 0xb7, 0x92, 0x71, 0xb2, 0xd3, 0x53, 0x91, 0xb6, 0xf7, 0x71, 0x3f, 0x60, 0xa2, 0x04,
	0x29, 0x10, 0x49, 0xc9, 0x02, 0xb5, 0x94, 0x51, 0x24, 0x14, 0xde, 0x8c, 0x9d, 0xc2, 0x63, 0xf0,
	0xde, 0x21, 0xcc, 0x9a, 0xe9, 0xd8, 0x0f, 0xd0, 0x2c, 0xa7, 0xe5, 0x2e, 0xad, 0xa8, 0xc7, 0xc1,
	0x56, 0xba, 0xe3, 0xf0, 0x56, 0x0f, 0x94, 0x43, 0x4d, 0xd0, 0x32, 0x69, 0x4b, 0x64, 0xd6, 0x3f,
	0xfb, 0x3a, 0xde, 0x38, 0xa3, 0x4b, 0x3d, 0x7b, 0xdd, 0xe8, 0xa8, 0xa9, 0x2a, 0x28, 0x47, 0x9b,
	0xbc, 0x93, 0x43, 0x60, 0xc4, 0x58, 0xbd, 0x47, 0x2b, 0xa0, 0xe4, 0x55, 0x22, 0x6a, 0x43, 0xae,
	0xa1, 0x4f, 0x4e, 0x92, 0x68, 0xf5, 0x34, 0xdb, 0xb6, 0xad, 0x5e, 0x0b, 0xf8, 0x38, 0x3a, 0x38,
	0x3e, 0x75, 0xc1, 0xa8, 0xbe, 0x2f, 0x8a, 0x71, 0x2c, 0xfd, 0xd9, 0xcd, 0x27, 0x9f, 0x8d, 0x7d,
	0xbf, 0x13, 0xb4, 0x01, 0x94, 0x05, 0x43, 0xa7, 0xb1, 0xe8, 0x86, 0x50, 0xc6, 0x2c, 0xd2, 0xb7,
	0x9d, 0x39, 0xfd, 0xfd, 0x0e, 0xf6, 0x1b, 0x55, 0xcc, 0xd2, 0x8c, 0x11, 0xce, 0xcb, 0x5d, 0x24,
	0x76, 0xa1, 0x50, 0xab, 0x70, 0x7c, 0xf6, 0x2c, 0x77, 0x3e, 0xa7, 0xad, 0xad, 0x3e, 0x07, 0xe0,
	0xe6, 0x78, 0xff, 0x1a, 0xf9, 0xa8, 0xea, 0x97, 0x4d, 0x55, 0xf5, 0xca, 0x70, 0x23, 0x25, 0x6a,
	0xa2, 0xd9, 0x06, 0xd6, 0x9e, 0xcc, 0xaf, 0xe6, 0xfe, 0x67, 0xd3, 0x10, 0xa3, 0x87, 0x60, 0x1c,
	0xac, 0x73, 0x97, 0x8e, 0x62, 0x9d, 0x10, 0x18, 0x09, 0x05, 0x9e, 0xf0, 0xdf, 0xc7, 0xf3, 0xeb,
	0xf9, 0x06, 0xe0, 0x76, 0x25, 0x59, 0xe6, 0x3a, 0xe2, 0x06, 0x28, 0x45, 0x66, 0x28, 0xdf, 0xc2,
	0x25, 0xb0, 0x6a, 0xd5, 0xa9, 0x26, 0xa9, 0x57, 0x30, 0x77, 0x42, 0x58, 0x59, 0xc3, 0x96, 0xa6,
	0x33, 0xbb, 0x29, 0x02, 0x55, 0x48, 0x70, 0x85, 0x19, 0x81, 0x02, 0x97, 0xc0, 0x40, 0xd0, 0x65,
	0xf6, 0xbc, 0x99, 0xc3, 0xed, 0xa7, 0xa1, 0x39, 0x3c, 0x40, 0x36, 0x3d, 0xad, 0x03, 0xae, 0x9b,
	0xff, 0x09, 0xf4, 0xac, 0x19, 0x01, 0xea, 0x90, 0xa4, 0xd5, 0x8d, 0x46, 0x3c, 0x01, 0xe6, 0xc2,
	0xf9, 0x31, 0xc8, 0xde, 0xae, 0xbc, 0xdd, 0x07, 0x2a, 0x22, 0xef, 0x0b, 0xf0, 0xe2, 0xd0, 0x7f,
	0x97, 0xeb, 0xc3, 0x05, 0x33, 0xce, 0x3b, 0xe0, 0xc0, 0xf6, 0x12, 0xa7, 0x1b, 0x5b, 0xc8, 0x3a,
	0x0a, 0x77, 0x91, 0x43, 0xa5, 0x73, 0x0e, 0x49, 0x21, 0xbf, 0x13, 0x3a, 0xc0, 0xeb, 0xd0, 0x5c,
	0x96, 0xd0, 0x5a, 0xbf, 0xf8, 0x68, 0x04, 0x8c, 0x63, 0xac, 0x1b, 0xb3, 0x76, 0xac, 0xc4, 0xc6,
	0x88, 0xd7, 0x65, 0xaf, 0x29, 0x15, 0xba, 0xc9, 0xbb, 0x0b, 0xa7, 0x34, 0x4c, 0xd4, 0x92, 0x17,
	0xe7, 0x17, 0x00, 0x03, 0x43, 0x34, 0x25, 0x5d, 0x32, 0x45, 0x63, 0x00, 0x9c, 0xe4, 0xa7, 0x02,
	0x84, 0xc4, 0xaa, 0x58, 0x38, 0xa5, 0xdc, 0x43, 0xad, 0x90, 0x2f, 0x12, 0x76, 0x6c, 0x3d, 0x50,
	0xdc, 0x72, 0x54, 0xd1, 0x94, 0x68, 0xd9, 0x65, 0xbe, 0x34, 0x08, 0xdb, 0x9f, 0x08, 0xc7, 0x58,
	0x5a, 0x38, 0x21, 0x3c, 0x59, 0xc3, 0x7e, 0x44, 0xa0, 0x77, 0x32, 0xef, 0xf4, 0xe1, 0xe1, 0x7e,
	0x72, 0x31, 0xa5, 0xa9, 0xf2, 0x44, 0xe6, 0x34, 0xa1, 0x09, 0x9a, 0x81, 0x85, 0xbc, 0xba, 0x8d,
	0xc4, 0x5e, 0x3a, 0xbf, 0xae, 0x52, 0x27, 0x04, 0xd8, 0x12, 0xd4, 0xcd, 0xba, 0xba, 0x4d, 0xd7,
	0x5f, 0x86, 0xae, 0x60, 0xf5, 0x2e, 0xbb, 0x93, 0x4f, 0x7f, 0x4c, 0xad, 0x9f, 0x6c, 0x9d, 0xe4,
	0x8e, 0xfa, 0xfd, 0x0f, 0x95, 0x81, 0xcb, 0x14, 0x9a, 0x3b, 0xe5, 0x8d, 0x36, 0xc2, 0x4f, 0x42,
	0x57, 0x73, 0xed, 0x3a, 0x3c, 0xda, 0xbb, 0x19, 0x3b, 0xbf, 0x99, 0xb2, 0x2c, 0x36, 0x20, 0x34,
	0x13, 0x98, 0xb2, 0xfc, 0x38, 0x18, 0xff, 0xe2, 0x3b, 0xb2, 0x14, 0x4b, 0xcb, 0x32, 0x99, 0x12,
	0x6d, 0x7c, 0x1b, 0x81, 0xf1, 0x30, 0xf0, 0xfb, 0xa2, 0x4c, 0x84, 0x41, 0x29, 0x0a, 0x25, 0x7f,
	0xc8, 0xea, 0xaa, 0x5b, 0x00, 0xae, 0x07, 0xa3, 0xbf, 0x3a, 0x8e, 0x24, 0x27, 0x34, 0xb8, 0xe9,
	0xfe, 0xd1, 0x8e, 0x18, 0x07, 0x96, 0xaf, 0xd1, 0xed, 0xff, 0x9e, 0x9b, 0x61, 0x24, 0x2a, 0x8e,
	0xaa, 0x65, 0x32, 0x05, 0x47, 0x2c, 0x1e, 0xe2, 0xfa, 0xcd, 0xd0, 0x3f, 0xb2, 0xb2, 0x04, 0x64,
	0x87, 0x25, 0x5d, 0x8f, 0x7c, 0x88, 0x03, 0x77, 0x9f, 0x86, 0xfe, 0x9d, 0x47, 0xb7, 0x01, 0x24,
	0x6b, 0x2c, 0xff, 0x2f, 0x42, 0xff, 0xc5, 0xb3, 0xc7, 0x77, 0xc2, 0xcb, 0xcb, 0xe1, 0x3b, 0x8f,
	0x56, 0x42, 0x8b, 0xf9, 0x05, 0xad, 0x63, 0x71, 0x95, 0x53, 0xb1, 0x7c, 0x98, 0x00, 0x00, 0x00,
	0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82,
}

var kofiImage = []byte("\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\b\x00\x00\x00\b\b\x06\x00\x00\x00\xc4\x0f\xbe\x8b\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\v\xfca\x05\x00\x00\x00 cHRM\x00\x00z&\x00\x00\x80\x84\x00\x00\xfa\x00\x00\x00\x80\xe8\x00\x00u0\x00\x00\xea`\x00\x00:\x98\x00\x00\x17p\x9c\xbaQ<\x00\x00\x01\xd5iTXtXML:com.adobe.xmp\x00\x00\x00\x00\x00<x:xmpmeta xmlns:x=\"adobe:ns:meta/\" x:xmptk=\"XMP Core 5.4.0\">\n   <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n      <rdf:Description rdf:about=\"\"\n            xmlns:tiff=\"http://ns.adobe.com/tiff/1.0/\">\n         <tiff:Compression>1</tiff:Compression>\n         <tiff:Orientation>1</tiff:Orientation>\n         <tiff:PhotometricInterpretation>2</tiff:PhotometricInterpretation>\n      </rdf:Description>\n   </rdf:RDF>\n</x:xmpmeta>\n\x02\u0600\x05\x00\x00\x00_IDAT\x18\x19c|\xf9\xf4\xe1\u007f\x06,@\\Z\x9e\x11$\xcc\x02\"\xae?\xfb\r\xa2\xe0@S\x8a\x15\xce\x06+\xf8W\x1f\f\x17\x003fob\xf8\xb7\xce\x04l2\x13\xaa\f\x82\xc7\x14t\x06a\x856P\a.\xc0\xf8\xbc\xc7\xf8\xbf\xb8\x12X1B\x8d\xa5.\x03\xc3\xf1\xcb\f S\bZ\x81S\x01\xcc8\x00]\x8a\x16\xcb\xe3F\x1e\xb1\x00\x00\x00\x00IEND\xaeB`\x82")
